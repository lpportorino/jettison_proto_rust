// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Root {
    #[prost(
        oneof = "root::Cmd",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21"
    )]
    pub cmd: ::core::option::Option<root::Cmd>,
}
/// Nested message and enum types in `Root`.
pub mod root {
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Cmd {
        #[prost(message, tag = "1")]
        StartAll(super::StartALl),
        #[prost(message, tag = "2")]
        StopAll(super::StopALl),
        #[prost(message, tag = "3")]
        Reboot(super::Reboot),
        #[prost(message, tag = "4")]
        PowerOff(super::PowerOff),
        #[prost(message, tag = "5")]
        Localization(super::SetLocalization),
        #[prost(message, tag = "6")]
        ResetConfigs(super::ResetConfigs),
        #[prost(message, tag = "7")]
        StartRec(super::StartRec),
        #[prost(message, tag = "8")]
        StopRec(super::StopRec),
        #[prost(message, tag = "9")]
        MarkRecImportant(super::MarkRecImportant),
        #[prost(message, tag = "10")]
        UnmarkRecImportant(super::UnmarkRecImportant),
        #[prost(message, tag = "11")]
        EnterTransport(super::EnterTransport),
        #[prost(message, tag = "12")]
        GeodesicModeEnable(super::EnableGeodesicMode),
        #[prost(message, tag = "13")]
        GeodesicModeDisable(super::DisableGeodesicMode),
        #[prost(message, tag = "14")]
        SaveFactoryDefaults(super::SaveFactoryDefaults),
        #[prost(message, tag = "15")]
        WipeUserData(super::WipeUserData),
        #[prost(message, tag = "16")]
        StepYear(super::StepYear),
        #[prost(message, tag = "17")]
        StepMonth(super::StepMonth),
        #[prost(message, tag = "18")]
        StepDay(super::StepDay),
        #[prost(message, tag = "19")]
        StepHour(super::StepHour),
        #[prost(message, tag = "20")]
        StepMinute(super::StepMinute),
        #[prost(message, tag = "21")]
        StepSecond(super::StepSecond),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartALl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StopALl {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct Reboot {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PowerOff {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ResetConfigs {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SaveFactoryDefaults {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WipeUserData {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StartRec {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StopRec {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MarkRecImportant {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnmarkRecImportant {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnterTransport {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct EnableGeodesicMode {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DisableGeodesicMode {}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SetLocalization {
    #[prost(enumeration = "super::super::ser::JonGuiDataSystemLocalizations", tag = "1")]
    pub loc: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepYear {
    /// Positive or negative year offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepMonth {
    /// Positive or negative month offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepDay {
    /// Positive or negative day offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepHour {
    /// Positive or negative hour offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepMinute {
    /// Positive or negative minute offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct StepSecond {
    /// Positive or negative second offset
    #[prost(int32, tag = "1")]
    pub offset: i32,
}
